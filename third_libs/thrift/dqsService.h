/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dqsService_H
#define dqsService_H

#include <thrift/TDispatchProcessor.h>
#include "dqs_types.h"



class dqsServiceIf {
 public:
  virtual ~dqsServiceIf() {}
  virtual void QueryDeviceInfo(std::string& _return, const std::string& req) = 0;
};

class dqsServiceIfFactory {
 public:
  typedef dqsServiceIf Handler;

  virtual ~dqsServiceIfFactory() {}

  virtual dqsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(dqsServiceIf* /* handler */) = 0;
};

class dqsServiceIfSingletonFactory : virtual public dqsServiceIfFactory {
 public:
  dqsServiceIfSingletonFactory(const boost::shared_ptr<dqsServiceIf>& iface) : iface_(iface) {}
  virtual ~dqsServiceIfSingletonFactory() {}

  virtual dqsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(dqsServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<dqsServiceIf> iface_;
};

class dqsServiceNull : virtual public dqsServiceIf {
 public:
  virtual ~dqsServiceNull() {}
  void QueryDeviceInfo(std::string& /* _return */, const std::string& /* req */) {
    return;
  }
};

typedef struct _dqsService_QueryDeviceInfo_args__isset {
  _dqsService_QueryDeviceInfo_args__isset() : req(false) {}
  bool req;
} _dqsService_QueryDeviceInfo_args__isset;

class dqsService_QueryDeviceInfo_args {
 public:

  dqsService_QueryDeviceInfo_args() : req() {
  }

  virtual ~dqsService_QueryDeviceInfo_args() throw() {}

  std::string req;

  _dqsService_QueryDeviceInfo_args__isset __isset;

  void __set_req(const std::string& val) {
    req = val;
  }

  bool operator == (const dqsService_QueryDeviceInfo_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const dqsService_QueryDeviceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dqsService_QueryDeviceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dqsService_QueryDeviceInfo_pargs {
 public:


  virtual ~dqsService_QueryDeviceInfo_pargs() throw() {}

  const std::string* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dqsService_QueryDeviceInfo_result__isset {
  _dqsService_QueryDeviceInfo_result__isset() : success(false) {}
  bool success;
} _dqsService_QueryDeviceInfo_result__isset;

class dqsService_QueryDeviceInfo_result {
 public:

  dqsService_QueryDeviceInfo_result() : success() {
  }

  virtual ~dqsService_QueryDeviceInfo_result() throw() {}

  std::string success;

  _dqsService_QueryDeviceInfo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const dqsService_QueryDeviceInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dqsService_QueryDeviceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dqsService_QueryDeviceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dqsService_QueryDeviceInfo_presult__isset {
  _dqsService_QueryDeviceInfo_presult__isset() : success(false) {}
  bool success;
} _dqsService_QueryDeviceInfo_presult__isset;

class dqsService_QueryDeviceInfo_presult {
 public:


  virtual ~dqsService_QueryDeviceInfo_presult() throw() {}

  std::string* success;

  _dqsService_QueryDeviceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class dqsServiceClient : virtual public dqsServiceIf {
 public:
  dqsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  dqsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void QueryDeviceInfo(std::string& _return, const std::string& req);
  void send_QueryDeviceInfo(const std::string& req);
  void recv_QueryDeviceInfo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class dqsServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<dqsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (dqsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_QueryDeviceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  dqsServiceProcessor(boost::shared_ptr<dqsServiceIf> iface) :
    iface_(iface) {
    processMap_["QueryDeviceInfo"] = &dqsServiceProcessor::process_QueryDeviceInfo;
  }

  virtual ~dqsServiceProcessor() {}
};

class dqsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  dqsServiceProcessorFactory(const ::boost::shared_ptr< dqsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< dqsServiceIfFactory > handlerFactory_;
};

class dqsServiceMultiface : virtual public dqsServiceIf {
 public:
  dqsServiceMultiface(std::vector<boost::shared_ptr<dqsServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~dqsServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<dqsServiceIf> > ifaces_;
  dqsServiceMultiface() {}
  void add(boost::shared_ptr<dqsServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void QueryDeviceInfo(std::string& _return, const std::string& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryDeviceInfo(_return, req);
    }
    ifaces_[i]->QueryDeviceInfo(_return, req);
    return;
  }

};



#endif
